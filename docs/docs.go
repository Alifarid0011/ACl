// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/approval/apply-decision": {
            "post": {
                "description": "Apply a decision to a step in an approval flow",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Approval"
                ],
                "summary": "Apply approval decision",
                "parameters": [
                    {
                        "description": "Apply Decision Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ApplyDecisionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/approval/create-flow": {
            "post": {
                "description": "Create an approval flow for a specific object",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Approval"
                ],
                "summary": "Create a new approval flow",
                "parameters": [
                    {
                        "description": "Create Flow Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateFlowRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/approval/flow/{object_type}/{object_id}": {
            "get": {
                "description": "Retrieve a flow using object type and object ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Approval"
                ],
                "summary": "Get approval flow by object ID and type",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Object Type",
                        "name": "object_type",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Object ID",
                        "name": "object_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.ApprovalFlow"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/approval/list": {
            "get": {
                "description": "List all approval flows filtered by object type and status",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Approval"
                ],
                "summary": "List approval flows",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Object Type",
                        "name": "object_type",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Flow Status",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.ApprovalFlow"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/approval/update-step": {
            "put": {
                "description": "Update the status of a step in the approval flow",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Approval"
                ],
                "summary": "Update step status",
                "parameters": [
                    {
                        "description": "Update Step Status Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateStepStatusRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Takes username and password, returns access and refresh token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Authenticate user",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "get": {
                "security": [
                    {
                        "AuthBearer": []
                    }
                ],
                "description": "Logs out the user and invalidates the refresh token based on user-agent",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Logout and invalidate refresh token",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/auth/refresh_token": {
            "post": {
                "description": "Uses a refresh token and user-agent info to generate a new access token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Use refresh token to get new access token",
                "parameters": [
                    {
                        "description": "Refresh token payload",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RefreshRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "security": [
                    {
                        "AuthBearer": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Register  user Registration",
                "parameters": [
                    {
                        "description": "register user",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/user": {
            "get": {
                "description": "Retrieve a list of all users",
                "tags": [
                    "users"
                ],
                "summary": "Get all users",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/create": {
            "post": {
                "description": "Register a new user in the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "description": "User data",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.MessageResponse"
                        }
                    },
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/me": {
            "get": {
                "description": "Get authenticated user information from token",
                "tags": [
                    "users"
                ],
                "summary": "Get current user info",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/uid/{uid}": {
            "get": {
                "description": "Get a user by their UID",
                "tags": [
                    "users"
                ],
                "summary": "Find user by UID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User UID",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/username/{username}": {
            "get": {
                "description": "Get a user object by username",
                "tags": [
                    "users"
                ],
                "summary": "Find user by username",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username",
                        "name": "username",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/{uid}": {
            "put": {
                "description": "Update user details by UID (admin or self)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User UID",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User update data",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete user by UID (admin only)",
                "tags": [
                    "users"
                ],
                "summary": "Delete a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User UID",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.ApplyDecisionRequest": {
            "type": "object",
            "properties": {
                "decision": {
                    "$ref": "#/definitions/dto.ApprovalDecisionDTO"
                },
                "object_id": {
                    "type": "string"
                },
                "object_type": {
                    "type": "string"
                },
                "step_id": {
                    "type": "integer"
                }
            }
        },
        "dto.ApprovalDecisionDTO": {
            "type": "object",
            "required": [
                "action",
                "at",
                "by"
            ],
            "properties": {
                "action": {
                    "description": "1: Approve, 2: Reject",
                    "type": "integer",
                    "enum": [
                        1,
                        2
                    ]
                },
                "at": {
                    "type": "string"
                },
                "by": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                }
            }
        },
        "dto.ApprovalStepInput": {
            "type": "object",
            "required": [
                "assignees",
                "name",
                "required",
                "step_id"
            ],
            "properties": {
                "assignees": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "type": "string"
                    }
                },
                "dependencies": {
                    "description": "ولیدیشن اختیاری",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.StepDependency"
                    }
                },
                "name": {
                    "type": "string"
                },
                "required": {
                    "type": "integer",
                    "minimum": 1
                },
                "step_id": {
                    "type": "integer",
                    "minimum": 1
                }
            }
        },
        "dto.CreateFlowRequest": {
            "type": "object",
            "required": [
                "final_step_id",
                "object_id",
                "object_type",
                "steps"
            ],
            "properties": {
                "final_step_id": {
                    "type": "integer",
                    "minimum": 1
                },
                "object_id": {
                    "type": "string"
                },
                "object_type": {
                    "type": "string"
                },
                "steps": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/dto.ApprovalStepInput"
                    }
                }
            }
        },
        "dto.CreateUserRequest": {
            "type": "object",
            "required": [
                "email",
                "mobile",
                "password",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "full_name": {
                    "type": "string",
                    "maxLength": 100
                },
                "mobile": {
                    "type": "string"
                },
                "national_code": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 6
                },
                "username": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 3
                }
            }
        },
        "dto.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "dto.LoginRequest": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "dto.MessageResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "dto.RefreshRequest": {
            "type": "object",
            "required": [
                "refresh_token"
            ],
            "properties": {
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "dto.UpdateStepStatusRequest": {
            "type": "object",
            "required": [
                "object_id",
                "object_type",
                "status",
                "step_id"
            ],
            "properties": {
                "object_id": {
                    "type": "string"
                },
                "object_type": {
                    "type": "string"
                },
                "status": {
                    "description": "Pending, Approved, Rejected",
                    "type": "integer",
                    "enum": [
                        0,
                        1,
                        2
                    ]
                },
                "step_id": {
                    "type": "integer",
                    "minimum": 1
                }
            }
        },
        "dto.UpdateUserRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "full_name": {
                    "type": "string"
                }
            }
        },
        "dto.UserResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "full_name": {
                    "type": "string"
                },
                "mobile": {
                    "type": "string"
                },
                "uid": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "model.ApprovalDecision": {
            "type": "object",
            "properties": {
                "action": {
                    "description": "1: Approve, 2: Reject",
                    "type": "integer"
                },
                "at": {
                    "description": "زمان تصمیم",
                    "type": "string"
                },
                "by": {
                    "description": "user_id تصمیم‌گیرنده",
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                }
            }
        },
        "model.ApprovalFlow": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "finalStepID": {
                    "description": "شماره مرحله نهایی",
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "objectID": {
                    "description": "شناسه آبجکت اصلی (مثلاً فاکتور، مرخصی)",
                    "type": "string"
                },
                "objectType": {
                    "description": "نوع آبجکت",
                    "type": "string"
                },
                "status": {
                    "description": "0: Pending, 1: Approved, 2: Rejected",
                    "type": "integer"
                },
                "steps": {
                    "description": "لیست مراحل اپروال",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.ApprovalStep"
                    }
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "model.ApprovalStep": {
            "type": "object",
            "properties": {
                "assignees": {
                    "description": "شناسه کاربران مجاز به تصمیم‌گیری",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "decisions": {
                    "description": "لیست تصمیمات گرفته‌شده",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.ApprovalDecision"
                    }
                },
                "dependencies": {
                    "description": "وابستگی به مراحل دیگر",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.StepDependency"
                    }
                },
                "name": {
                    "description": "نام مرحله",
                    "type": "string"
                },
                "required": {
                    "description": "حداقل تصمیم مثبت موردنیاز",
                    "type": "integer"
                },
                "status": {
                    "description": "0: Pending, 1: Approved, 2: Rejected",
                    "type": "integer"
                },
                "stepID": {
                    "description": "شماره مرحله",
                    "type": "integer"
                }
            }
        },
        "model.StepDependency": {
            "type": "object",
            "properties": {
                "targets": {
                    "description": "لیست شماره مراحل وابسته (همه الزامی هستند)",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "type": {
                    "description": "نوع وابستگی: step, group, role",
                    "type": "string"
                }
            }
        },
        "response.Meta": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "extra": {
                    "description": "For additional metadata",
                    "type": "object",
                    "additionalProperties": true
                },
                "message": {
                    "type": "string"
                },
                "message_id": {
                    "description": "For i18n",
                    "type": "string"
                },
                "pagination": {
                    "$ref": "#/definitions/response.PaginationMeta"
                },
                "success": {
                    "type": "boolean"
                },
                "trace_id": {
                    "type": "string"
                }
            }
        },
        "response.PaginationMeta": {
            "type": "object",
            "properties": {
                "page": {
                    "type": "integer"
                },
                "per_page": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                },
                "total_pages": {
                    "type": "integer"
                }
            }
        },
        "response.Response": {
            "type": "object",
            "properties": {
                "data": {},
                "errors": {},
                "meta": {
                    "$ref": "#/definitions/response.Meta"
                }
            }
        }
    },
    "securityDefinitions": {
        "AuthBearer": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Swagger Example API",
	Description:      "This is a sample API for demonstrating Swagger with Bearer Authentication in Go using Gin",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
