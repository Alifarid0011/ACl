definitions:
  dto.ApplyDecisionRequest:
    properties:
      decision:
        $ref: '#/definitions/dto.ApprovalDecisionDTO'
      object_id:
        type: string
      object_type:
        type: string
      step_id:
        type: integer
    type: object
  dto.ApprovalDecisionDTO:
    properties:
      action:
        description: '1: Approve, 2: Reject'
        enum:
        - 1
        - 2
        type: integer
      at:
        type: string
      by:
        type: string
      comment:
        type: string
    required:
    - action
    - at
    - by
    type: object
  dto.ApprovalStepInput:
    properties:
      assignees:
        items:
          type: string
        minItems: 1
        type: array
      dependencies:
        description: ولیدیشن اختیاری
        items:
          $ref: '#/definitions/model.StepDependency'
        type: array
      name:
        type: string
      required:
        minimum: 1
        type: integer
      step_id:
        minimum: 1
        type: integer
    required:
    - assignees
    - name
    - required
    - step_id
    type: object
  dto.CheckPermissionDTO:
    properties:
      act:
        description: متد مانند GET, POST, PUT, DELETE
        type: string
      obj:
        description: مسیر مانند /user/all یا /approvals/:id
        type: string
      sub:
        description: می‌تواند نقش یا یوزر باشد
        type: string
    required:
    - act
    - obj
    - sub
    type: object
  dto.CreateFlowRequest:
    properties:
      final_step_id:
        minimum: 1
        type: integer
      object_id:
        type: string
      object_type:
        type: string
      steps:
        items:
          $ref: '#/definitions/dto.ApprovalStepInput'
        minItems: 1
        type: array
    required:
    - final_step_id
    - object_id
    - object_type
    - steps
    type: object
  dto.CreateUserRequest:
    properties:
      email:
        type: string
      full_name:
        maxLength: 100
        type: string
      mobile:
        type: string
      national_code:
        type: string
      password:
        maxLength: 100
        minLength: 6
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - email
    - mobile
    - password
    - username
    type: object
  dto.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  dto.GroupingDTO:
    properties:
      child:
        description: یوزر یا منبع
        type: string
      parent:
        description: نقش
        type: string
      type:
        description: g برای نقش‌ها و g2 برای کاربران
        enum:
        - g
        - g2
        type: string
    required:
    - child
    - parent
    - type
    type: object
  dto.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  dto.MessageResponse:
    properties:
      message:
        type: string
    type: object
  dto.RefreshRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  dto.UpdateStepStatusRequest:
    properties:
      object_id:
        type: string
      object_type:
        type: string
      status:
        description: Pending, Approved, Rejected
        enum:
        - 0
        - 1
        - 2
        type: integer
      step_id:
        minimum: 1
        type: integer
    required:
    - object_id
    - object_type
    - status
    - step_id
    type: object
  dto.UpdateUserRequest:
    properties:
      email:
        type: string
      full_name:
        type: string
    type: object
  dto.UserResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      full_name:
        type: string
      mobile:
        type: string
      uid:
        type: string
      username:
        type: string
    type: object
  model.ApprovalDecision:
    properties:
      action:
        description: '1: Approve, 2: Reject'
        type: integer
      at:
        description: زمان تصمیم
        type: string
      by:
        description: user_id تصمیم‌گیرنده
        type: string
      comment:
        type: string
    type: object
  model.ApprovalFlow:
    properties:
      createdAt:
        type: string
      finalStepID:
        description: شماره مرحله نهایی
        type: integer
      id:
        type: string
      objectID:
        description: شناسه آبجکت اصلی (مثلاً فاکتور، مرخصی)
        type: string
      objectType:
        description: نوع آبجکت
        type: string
      status:
        description: '0: Pending, 1: Approved, 2: Rejected'
        type: integer
      steps:
        description: لیست مراحل اپروال
        items:
          $ref: '#/definitions/model.ApprovalStep'
        type: array
      updatedAt:
        type: string
    type: object
  model.ApprovalStep:
    properties:
      assignees:
        description: شناسه کاربران مجاز به تصمیم‌گیری
        items:
          type: string
        type: array
      decisions:
        description: لیست تصمیمات گرفته‌شده
        items:
          $ref: '#/definitions/model.ApprovalDecision'
        type: array
      dependencies:
        description: وابستگی به مراحل دیگر
        items:
          $ref: '#/definitions/model.StepDependency'
        type: array
      name:
        description: نام مرحله
        type: string
      required:
        description: حداقل تصمیم مثبت موردنیاز
        type: integer
      status:
        description: '0: Pending, 1: Approved, 2: Rejected'
        type: integer
      stepID:
        description: شماره مرحله
        type: integer
    type: object
  model.StepDependency:
    properties:
      targets:
        description: لیست شماره مراحل وابسته (همه الزامی هستند)
        items:
          type: integer
        type: array
      type:
        description: 'نوع وابستگی: step, group, role'
        type: string
    type: object
  response.Meta:
    properties:
      code:
        type: integer
      extra:
        additionalProperties: true
        description: For additional metadata
        type: object
      message:
        type: string
      message_id:
        description: For i18n
        type: string
      pagination:
        $ref: '#/definitions/response.PaginationMeta'
      success:
        type: boolean
      trace_id:
        type: string
    type: object
  response.PaginationMeta:
    properties:
      page:
        type: integer
      per_page:
        type: integer
      total:
        type: integer
      total_pages:
        type: integer
    type: object
  response.Response:
    properties:
      data: {}
      errors: {}
      meta:
        $ref: '#/definitions/response.Meta'
    type: object
info:
  contact: {}
  description: This is a sample API for demonstrating Swagger with Bearer Authentication
    in Go using Gin
  title: Swagger Example API
  version: "1.0"
paths:
  /acl/check:
    get:
      consumes:
      - application/json
      description: بررسی می‌کند که آیا کاربر اجازه انجام عمل مشخصی را دارد یا خیر.
      parameters:
      - description: اطلاعات بررسی دسترسی
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CheckPermissionDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: بررسی سطح دسترسی
      tags:
      - ACL
  /acl/grouping/add:
    post:
      consumes:
      - application/json
      description: یک نقش یا گروه به نقش/گروه دیگر تخصیص می‌دهد (گروه‌بندی).
      parameters:
      - description: اطلاعات گروه‌بندی
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.GroupingDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: افزودن گروه‌بندی
      tags:
      - ACL
  /acl/permission/list:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      tags:
      - ACL
  /acl/policy/create:
    post:
      consumes:
      - application/json
      description: مجوزی برای یک کاربر/گروه جهت انجام عملی بر یک شیء اضافه می‌کند.
      parameters:
      - description: اطلاعات مجوز
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CheckPermissionDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: افزودن مجوز
      tags:
      - ACL
  /acl/policy/remove:
    delete:
      consumes:
      - application/json
      description: مجوز مشخص شده را برای کاربر/گروه حذف می‌کند.
      parameters:
      - description: اطلاعات مجوز برای حذف
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CheckPermissionDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: حذف مجوز
      tags:
      - ACL
  /approval/apply-decision:
    post:
      consumes:
      - application/json
      description: Apply a decision to a step in an approval flow
      parameters:
      - description: Apply Decision Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ApplyDecisionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Apply approval decision
      tags:
      - Approval
  /approval/create-flow:
    post:
      consumes:
      - application/json
      description: Create an approval flow for a specific object
      parameters:
      - description: Create Flow Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateFlowRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new approval flow
      tags:
      - Approval
  /approval/flow/{object_type}/{object_id}:
    get:
      consumes:
      - application/json
      description: Retrieve a flow using object type and object ID
      parameters:
      - description: Object Type
        in: path
        name: object_type
        required: true
        type: string
      - description: Object ID
        in: path
        name: object_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ApprovalFlow'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get approval flow by object ID and type
      tags:
      - Approval
  /approval/list:
    get:
      consumes:
      - application/json
      description: List all approval flows filtered by object type and status
      parameters:
      - description: Object Type
        in: query
        name: object_type
        type: string
      - description: Flow Status
        in: query
        name: status
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.ApprovalFlow'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: List approval flows
      tags:
      - Approval
  /approval/update-step:
    put:
      consumes:
      - application/json
      description: Update the status of a step in the approval flow
      parameters:
      - description: Update Step Status Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateStepStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update step status
      tags:
      - Approval
  /auth/login:
    post:
      consumes:
      - application/json
      description: Takes username and password, returns access and refresh token
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: Authenticate user
      tags:
      - Auth
  /auth/logout:
    get:
      consumes:
      - application/json
      description: Logs out the user and invalidates the refresh token based on user-agent
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - AuthBearer: []
      summary: Logout and invalidate refresh token
      tags:
      - Auth
  /auth/refresh_token:
    post:
      consumes:
      - application/json
      description: Uses a refresh token and user-agent info to generate a new access
        token
      parameters:
      - description: Refresh token payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RefreshRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: Use refresh token to get new access token
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      parameters:
      - description: register user
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - AuthBearer: []
      summary: Register  user Registration
      tags:
      - Auth
  /routes/list:
    get:
      consumes:
      - application/json
      description: این متد تمام مسیرها را همراه با متد HTTP آن‌ها دسته‌بندی‌شده بر
        اساس prefix بازمی‌گرداند.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: دریافت لیست اندپوینت‌ها
      tags:
      - Route
  /users/{uid}:
    delete:
      description: Delete user by UID (admin only)
      parameters:
      - description: User UID
        in: path
        name: uid
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - AuthBearer: []
      summary: Delete a user
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update user details by UID (admin or self)
      parameters:
      - description: User UID
        in: path
        name: uid
        required: true
        type: string
      - description: User update data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - AuthBearer: []
      summary: Update a user
      tags:
      - users
  /users/all:
    get:
      description: Retrieve a list of all users
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - AuthBearer: []
      summary: Get all users
      tags:
      - users
  /users/create:
    post:
      consumes:
      - application/json
      description: Register a new user in the system
      parameters:
      - description: User data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - AuthBearer: []
      summary: Create a new user
      tags:
      - users
  /users/me:
    get:
      description: Get authenticated user information from token
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - AuthBearer: []
      summary: Get current user info
      tags:
      - users
  /users/uid/{uid}:
    get:
      description: Get a user by their UID
      parameters:
      - description: User UID
        in: path
        name: uid
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - AuthBearer: []
      summary: Find user by UID
      tags:
      - users
  /users/username/{username}:
    get:
      description: Get a user object by username
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - AuthBearer: []
      summary: Find user by username
      tags:
      - users
securityDefinitions:
  AuthBearer:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
